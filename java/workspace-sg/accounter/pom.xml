<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ru.argustelecom.accounter</groupId>
  <artifactId>accounter</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>accounter</name>
  <packaging>pom</packaging>

  
  <modules>
    <module>accounter-enterprise</module>
    <module>accounter-ui</module>
    <module>accounter-core</module>
  </modules>
  
 <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->

        <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>
        <version.wildfly>9.0.0.Alpha1</version.wildfly>
        <version.jboss.spec.javaee.7.0>1.0.1.Final</version.jboss.spec.javaee.7.0>

        <!-- other plugin versions -->
        <version.compiler.plugin>3.1</version.compiler.plugin>
        <version.ear.plugin>2.6</version.ear.plugin>
        <version.ejb.plugin>2.3</version.ejb.plugin>
        <version.war.plugin>2.5</version.war.plugin>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.7</maven.compiler.target>
        <maven.compiler.source>1.7</maven.compiler.source>
  </properties>
  

  <dependencyManagement>
        <dependencies>
            <!-- Define the version of the EJB jar so that we don't need 
                to repeat ourselves in every module -->
            <dependency>
                <groupId>ru.argus.accounter</groupId>
                <artifactId>accounter-core</artifactId>
                <version>${project.version}</version>
                <type>ejb</type>
            </dependency>
            
            <!-- Define the version of the WAR so that we don't need to repeat 
                ourselves in every module -->
            <dependency>
                <groupId>ru.argus.accounter</groupId>
                <artifactId>accounter-ui</artifactId>
                <version>${project.version}</version>
                <type>war</type>
                <scope>compile</scope>
            </dependency>

            <!-- Define the version of JBoss' Java EE 7 APIs we want to import.
               Any dependencies from org.jboss.spec will have their version defined by this
               BOM -->
            <!-- JBoss distributes a complete set of Java EE 7 APIs including
                a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
                a collection) of artifacts. We use this here so that we always get the correct
                versions of artifacts. Here we use the jboss-javaee-7.0 stack (you can
                read this as the JBoss stack of the Java EE 7 APIs). You can actually
                use this stack with any version of WildFly that implements Java EE 7, not
                just WildFly 8! -->
            <dependency>
                <groupId>org.jboss.spec</groupId>
                <artifactId>jboss-javaee-7.0</artifactId>
                <version>${version.jboss.spec.javaee.7.0}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>





  <build>
        <!-- Set the name of the war, used as the context root when the app 
            is deployed -->
        <plugins>
            <!-- Compiler plugin enforces Java 1.6 compatibility and 
                activates annotation processors -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${version.compiler.plugin}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin> 
                <!-- The WildFly plugin deploys your ear to a local JBoss
                    AS container -->
                <!-- Due to Maven's lack of intelligence with EARs we need 
                    to configure the wildfly maven plugin to skip deployment for all modules.
                    We then enable it specifically in the ear module. -->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.wildfly.maven.plugin}</version>

                <configuration>
                    <wildfly-home>D:\nv\wildfly-8.2.0.Final\wildfly-8.2.0.Final\</wildfly-home>
                    <hostname>${wildfly-hostname}</hostname>
                    <port>${wildfly-port}</port>
                    <username>${wildfly-username}</username>
                    <password>${wildfly-password}</password>
                    <skip>true</skip>
                </configuration>

            </plugin>

                        <!-- этот плагин умеет собирать jmeter и выполнять на нем все найденные 
            тестпланы. Нам здесь надо только собирать -->
            <plugin>
                <groupId>com.lazerycode.jmeter</groupId>
                <artifactId>jmeter-maven-plugin</artifactId>
                <version>1.8.1</version>
                <configuration>
                <!-- нам надо, что jmeter просто собрался, но не выполнял тесты. Поэтому 
                игнорим все тестпланы -->
                    <testFilesExcluded>
                        <excludeJMeterTestFile>*.jmx</excludeJMeterTestFile>
                    </testFilesExcluded>
                </configuration>
            </plugin>
            <!-- собираемый плагином jmeter несколько устарел и содержит либы, конфликтующие 
            с более свежими либами, входящие в selenium-standalone. Здесь просто удалим 
            из состава jmeter эти конфликтующие устаревшие либы - их более свежая версия 
            попадет на classpath благодаря selenium-standalone -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <configuration>
                    <tasks>
                        <delete>
                            <fileset dir="./target/jmeter/lib" includes="http*-4.2*.jar" />
                        </delete>
                    </tasks>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>